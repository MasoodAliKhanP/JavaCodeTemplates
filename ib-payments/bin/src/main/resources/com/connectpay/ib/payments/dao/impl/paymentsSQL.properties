get.payment.status=select * from payment_status where status=:status
insert.payment.details=INSERT INTO payment(payment_reference,email,person_id,party_id,debitor_iban,creditor_details_id,payment_status_id,payment_amount,payment_currency,fee_account_number,fee_account_currency,supplier_reference,structured_payment,structured_payment_details,unstructured_payment,unstructured_payment_details,initial_payment_id,payment_type_id,service_charge,create_time,update_time) values(:paymentReference,:email,:personId,:partyId,:debitorIban,:creditorDetaildId,:paymentStatusId,:paymentAmount,:paymentCurrency,:feeAccountNumber,:feeAccountCurrency,:supplierReference,:structurePayment,:structurePaymentDetails,:unStructurePayment,:unStructurePaymentDetails,:initialPaymentId,:paymentTypeId,:serviceCharge,:createTime,:createTime)
insert.payment.log.details=INSERT INTO payment_log(payment_reference,email,person_id,party_id,debitor_iban,creditor_details_id,payment_status_id,payment_amount,payment_currency,fee_account_number,fee_account_currency,supplier_reference,structured_payment,structured_payment_details,unstructured_payment,unstructured_payment_details,payment_id,provider_error_code,provider_error_msg,provider_status,cnp_error_code,cnp_error_msg,hash_error_code_error_msg,create_time,update_time) values(:paymentReference,:email,:personId,:partyId,:debitorIban,:creditorDetaildId,:paymentStatusId,:paymentAmount,:paymentCurrency,:feeAccountNumber,:feeAccountCurrency,:supplierReference,:structurePayment,:structurePaymentDetails,:unStructurePayment,:unStructurePaymentDetails,:id,:errorCode,:errorMsg,:providerStatus,:apiErrorCode,:apiErrorMsg,:hashErrorCodeMsg,:createTime,:createTime)
update.payment.details = UPDATE payment SET supplier_reference=:supplierReference, payment_status_id=:paymentStatusId, provider_error_code=:errorCode ,provider_error_msg=:errorMsg ,provider_status=:providerStatus,update_time=:updateTime WHERE id=:id
payment.request.response=INSERT INTO payment_request_response (payment_id,payment_request,payment_response, provider_id) VALUES(:paymentId, :request, :response, :providerId)
get.payment.details.by.id=select p.id,p.payment_type_id,p.provider_error_code,p.provider_error_msg,p.provider_status,p.payment_reference,p.supplier_reference,p.email,p.person_id,p.party_id,p.debitor_iban,p.creditor_details_id,p.payment_status_id,p.payment_amount,p.payment_currency,paycurrSupport.currency_country_name,p.fee_account_number,p.fee_account_currency,p.supplier_reference,p.structured_payment,p.structured_payment_details,p.unstructured_payment,p.unstructured_payment_details,p.nano_initiated_loop_count,p.nano_waiting_loop_count,ps.status,cd.bank_code,cd.bank_name,cd.bank_address,cd.account_number,cd.name,pd.exchange_amount,pd.exchange_currency,pd.fx_rate,pt.type as payment_type,p.create_time,p.update_time,p.service_charge from payment p LEFT JOIN creditor_details cd ON p.creditor_details_id=cd.id LEFT JOIN payment_status ps ON p.payment_status_id=ps.id LEFT JOIN payment_details pd ON p.id=pd.payment_id LEFT JOIN payment_type pt ON pt.id=p.payment_type_id LEFT JOIN payment_currency_supported paycurrSupport  ON p.payment_currency  = paycurrSupport.currency_code WHERE p.payment_reference =:paymentReference
get.payment.error.details.by.error.code=select * from payment_error_library where error_code = :providerErrorCode
create.initial.payment.request=INSERT INTO initial_payment(request,response) VALUES(:initialRequest,:initialResponse)
update.initial.payment.request=UPDATE initial_payment SET response = :initialResponse WHERE id=:id
create.payment.otp.mapping=INSERT INTO payment_otp_mapping(payment_reference,phone_otp_reference,phone_otp_status,authCode) VALUES(:paymentReference, :phoneOtpReference, :phoneOtpStatus, :authCode)
update.payment.otp.mapping=UPDATE payment_otp_mapping  SET phone_otp_status=:phoneOtpStatus , login_attempts =login_attempts+1 , active=:isActive WHERE phone_otp_reference=:phoneOtpReference 
get.payment.otp.mapping=SELECT * FROM payment_otp_mapping WHERE phone_otp_reference=:phoneOtpReference
remove.payment.otp.mapping=UPDATE payment_otp_mapping SET active=0 where authCode=:authCode
check.payment.otp.mapping=SELECT * FROM payment_otp_mapping WHERE payment_reference=:paymentReference and authCode=:authCode and active=1
get.payment.currency = SELECT id,currency_code,currency_iso_code,currency_country_name,active FROM payment_currency_supported WHERE active =1;
create.currency.exchange.payment.details=INSERT INTO payment_details(payment_id,exchange_currency,exchange_amount,fx_rate) VALUES(:id,:exchangeCurrency,:exchangeAmount,:fxCurrencyRate);
get.payments.list=select a.*,CONCAT(ifnull(name,''),' ',ifnull(account_number,''),' ',ifnull(payment_details,'')) as beneficiary_details from (select p.id,p.debitor_iban, \
							p.payment_reference, pt.type as payment_type, \
							p.payment_amount, \
							p.payment_currency,p.payment_type_id, \
							case when p.structured_payment = 1 then p.structured_payment_details else p.unstructured_payment_details end as payment_details, \
							DATE_FORMAT(p.update_time,'%Y-%m-%d')  update_time, \
							ps.status, \
							cd.account_number, \
							cd.name, \
							pd.exchange_currency  \
					from payment p LEFT JOIN creditor_details cd ON p.creditor_details_id=cd.id \
									LEFT JOIN payment_status ps ON p.payment_status_id=ps.id \
									LEFT JOIN payment_details pd ON pd.payment_id=p.id \
									LEFT JOIN payment_type pt ON pt.id=p.payment_type_id \
					WHERE p.party_id = :customerPartyId \
					AND ps.status != 'PO_INITIATED' order by p.update_time desc)a
get.payment.statuses=select id, status from payment_status where active=1
get.payments.other.details = SELECT payment_id,exchange_currency,exchange_amount,fx_rate FROM payment_details WHERE payment_id=:paymentId
update.payments.status.by.paymentRef.list = UPDATE payment SET payment_status_id=:paymentStatusId WHERE payment_reference in (:paymentRefList)
get.payment.log.by.status.id = SELECT * FROM payment_log WHERE payment_id=:paymentId and payment_status_id = :statusId;
update.nano.initiated.count=UPDATE payment SET nano_initiated_loop_count=:nanoInitiatedCount WHERE payment_reference=:paymentReference
update.nano.waiting.count=UPDATE payment SET nano_waiting_loop_count=:nanoWaitingCount WHERE payment_reference=:paymentReference
# ----------------- Bulk PaymentData Start ---------------------------------------#
insert.bulk.payment.data=INSERT INTO `bulk_payment_data` (`bulk_payment_reference`,`customer_party_Id`,`email`,person_id, `bulk_payment_type_id`, `payment_file_location`, `payment_file_name`, `uploaded_by`,`payment_file_status_id`) VALUES (:bulkPaymentReference,:customerPartyId,:email,:personId, :bulkPaymentTypeId, :fileLocation, :fileName, :uploadedBy,:bulkPaymentFileStatusId);
insert.bulk.payment.map.data = INSERT INTO bulk_payment_mapping (`bulk_payment_reference`,`payment_reference`) VALUES(:bulkPaymentReference,:paymentReference)
get.bulk.payment.data = SELECT payer_account_number,customer_party_Id,email,person_id,bulk_payment_reference,payment_file_name,total_transaction_count,total_transaction_amount, bpt.payment_type,bs.status FROM bulk_payment_data bpd INNER JOIN bulk_payment_type bpt ON bpd.bulk_payment_type_id = bpt.id JOIN bulk_payment_file_status bs ON bs.id=bpd.payment_file_status_id WHERE bulk_payment_reference = :bulkPaymentReference
get.bulk.payment.data.by.partyId = SELECT customer_party_Id,pf.status,bulk_payment_reference,email,person_id,bulk_payment_type_id,payment_file_name,uploaded_by,payment_file_status_id,bp.create_time FROM bulk_payment_data bp JOIN bulk_payment_file_status pf ON bp.payment_file_status_id = pf.id WHERE customer_party_Id=:customerPartyId and bp.payment_file_status_id NOT IN (:fileStatusIdList) order by bp.create_time desc limit :startIndex , :size
update.bulk.payment.data.by.refId = UPDATE bulk_payment_data SET payment_file_status_id = :bulkPaymentFileStatusId WHERE bulk_payment_reference = :bulkPaymentReference
update.bulk.payment.trans.data.by.refId =  UPDATE bulk_payment_data SET total_transaction_count=:totalTransactionCount , total_transaction_amount=:totalTransactionAmt WHERE bulk_payment_reference = :bulkPaymentReference
update.person.by.payment.ref.id = UPDATE payment SET person_id=:personId,email=:email WHERE payment_reference=:paymentReference
save.bulk.payment.error.message = UPDATE payment SET api_error_message = :apiErrorMessage ,payment_status_id=:paymentStatusId, api_error_code = :apiErrorCode WHERE payment_reference = :paymentReference
get.bulk.payment.mapping.by.ref.Id = SELECT bulk_payment_reference,payment_reference FROM bulk_payment_mapping WHERE bulk_payment_reference =:bulkPaymentRef
update.iban.by.bulk.ref.id = UPDATE bulk_payment_data SET payer_account_number =:payerIban WHERE bulk_payment_reference=:bulkPaymentReference
get.customer.partyId.By.bulkReference=SELECT * FROM bulk_payment_data WHERE bulk_payment_reference = :bulkPaymentReference
get.bulk.payment.file.count= SELECT count(*) FROM bulk_payment_data bp JOIN bulk_payment_file_status pf ON bp.payment_file_status_id = pf.id WHERE customer_party_Id=:customerPartyId and bp.payment_file_status_id NOT IN (:fileStatusIdList)
# ----------------- Bulk PaymentData End ---------------------------------------#	

#----------------- Master Data ---------------------------#
get.bulk.payment.types= SELECT id,payment_type,description,is_active FROM bulk_payment_type WHERE is_active = 1
get.bulk.payment.file.status = SELECT id,status,description,active FROM bulk_payment_file_status WHERE active = 1
get.payment.limit.type= SELECT * FROM payment_limit_type WHERE is_active = 1
get.payment.type = SELECT * FROM payment_type WHERE is_active = 1
#----------------- Master Data End -----------------------#
get.payment.details.by.date=select p.id,p.payment_type_id,p.provider_error_code,p.provider_error_msg,p.provider_status,p.payment_reference,p.supplier_reference,p.email,p.party_id,p.debitor_iban,p.creditor_details_id,p.payment_status_id,p.payment_amount,p.payment_currency,p.fee_account_number,p.fee_account_currency,p.structured_payment,p.structured_payment_details,p.unstructured_payment,p.unstructured_payment_details,p.service_charge,p.nano_waiting_loop_count,p.nano_initiated_loop_count,ps.status,cd.bank_code,cd.bank_name,cd.bank_address,cd.account_number,cd.name,pd.exchange_amount,pd.exchange_currency,pd.fx_rate,pt.type as payment_type,p.create_time,p.update_time,pl.create_time as pay_create_time FROM payment p LEFT JOIN creditor_details cd ON p.creditor_details_id=cd.id LEFT JOIN payment_status ps ON p.payment_status_id=ps.id LEFT JOIN payment_details pd ON p.id=pd.payment_id LEFT JOIN payment_type pt ON pt.id=p.payment_type_id LEFT JOIN payment_log pl ON p.id=pl.payment_id AND pl.payment_status_id =1 WHERE p.update_time>=:fromDate AND p.update_time<=:toDate
get.payment.details.by.paymentRef.list = SELECT status,p.create_time,payment_reference,party_id,payment_amount,payment_currency FROM payment p JOIN payment_status ps ON ps.id=p.payment_status_id where payment_reference in (:paymentRefList)

#---------------------- Payment Limit Queries start ----------------#
get.payment.data.by.partyId.and.person.id = select sum(payment_amount) as total_amount,party_id,person_id,payment_currency from payment where update_time BETWEEN :startDate AND :endDate and person_id =:personId and party_id=:partyId and payment_type_id =:paymentTypeId and payment_status_id in (:paymentStatusIdList) group by payment_currency
get.payment.data.by.partyId = select sum(payment_amount) as total_amount,party_id,payment_currency from payment where update_time BETWEEN :startDate AND :endDate and party_id=:partyId and payment_type_id =:paymentTypeId and payment_status_id in (:paymentStatusIdList) group by payment_currency
get.payment.limits.by.customerId= SELECT amount,customer_id,currency,pl.type,pl.id from customer_payment_limits cl JOIN payment_limit_type pl ON pl.id=cl.limit_type_id where cl.customer_id=:customerId and cl.is_active =1
get.payment.limits.by.customerPerson.mapId= SELECT amount,customer_person_map_id,currency,pl.type,pl.id from customer_person_payment_limits cpl JOIN payment_limit_type pl ON pl.id=cpl.limit_type_id where cpl.customer_person_map_id=:customerPersonMapId and cpl.is_active=1
get.payment.limits.by.customerType=SELECT * FROM default_payment_limit WHERE customer_type_id = :customerTypeId and is_active =1
batch.insert.customer.payment.limit= INSERT INTO `customer_payment_limits` (`customer_id`, `limit_type_id`, `amount`, `currency`,`agent`) VALUES (:customerId, :paymentLimitType.id, :amount, :currency,:agent)
batch.insert.customer.person.payment.limit= INSERT INTO `customer_person_payment_limits` (`customer_person_map_id`, `limit_type_id`, `amount`, `currency`,`agent`) VALUES (:customerPersonMapId, :paymentLimitType.id, :amount, :currency,:agent)
batch.update.customer.person.payment.limit = UPDATE customer_person_payment_limits SET amount=:amount,agent=:agent WHERE customer_person_map_id = :customerPersonMapId and limit_type_id=:paymentLimitType.id
batch.update.customer.payment.limit = UPDATE customer_payment_limits SET amount=:amount,agent=:agent WHERE customer_id=:customerId and  limit_type_id=:paymentLimitType.id
batch.inactive.customer.person.payment.limit.log = UPDATE customer_person_payment_limits_log SET is_active=0 WHERE customer_person_map_id = :customerPersonMapId and limit_type_id=:paymentLimitType.id
batch.inactive.customer.payment.limit.log = UPDATE customer_payment_limits_log SET is_active=0 WHERE customer_id=:customerId and  limit_type_id=:paymentLimitType.id
batch.insert.customer.person.payment.limit.log = INSERT INTO `customer_person_payment_limits_log` (`customer_person_map_id`, `limit_type_id`, `amount`, `currency`,`agent`) VALUES (:customerPersonMapId, :paymentLimitType.id, :amount, :currency,:agent)
batch.insert.customer.payment.limit.log =  INSERT INTO `customer_payment_limits_log` (`customer_id`, `limit_type_id`, `amount`, `currency`,`agent`) VALUES (:customerId, :paymentLimitType.id, :amount, :currency,:agent)
insert.payment.limits.document.details=INSERT INTO payment_limits_document(source_type, source_id, document_reference) values(:sourceType, :sourceId, :documentReference)
#---------------------- Payment Limit Queries End ----------------#